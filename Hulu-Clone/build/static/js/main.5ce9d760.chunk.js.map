{"version":3,"sources":["Header.js","Request.js","Nav.js","VideoCard.js","Result.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","className","src","alt","API_KEY","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMysteryn","fetchSciFi","fetchWestern","fetchAnimation","fetchTV","Nav","setSeletedOption","onClick","requests","VideoCard","movie","backdrop_path","poster_path","line","element","truncateText","text","overview","title","original_name","vote_count","Result","selectedOption","useState","movies","setMovies","useEffect","a","axios","get","request","data","results","fetchData","map","key","id","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5ce9d760.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\r\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className='header'>\r\n            <div className='header_icons'>\r\n                <div className='header_icon header_icon-active'>\r\n                <HomeIcon />\r\n                <p>Home</p>\r\n                </div>\r\n                <div className='header_icon'>\r\n                <FlashOnIcon />\r\n                <p>Trending</p>\r\n                </div>\r\n                <div className='header_icon'>\r\n                <LiveTvIcon />\r\n                <p>verified</p>\r\n                </div>\r\n                <div className='header_icon'>\r\n                <VideoLibraryIcon />\r\n                <p>collection</p>\r\n                </div>\r\n                <div className='header_icon'>\r\n                <SearchIcon />\r\n                <p>search</p>\r\n                </div>\r\n                <div className='header_icon'>\r\n                <PersonOutlineIcon />\r\n                <p>Account</p>\r\n                </div>\r\n            </div>\r\n            <img src=\"https://press.hulu.com/wp-content/uploads/2020/02/hulu-white.png\" alt=\"\"  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","const API_KEY = '599119075bf5fe0efd79f9ac1dcb4e32';\r\n\r\nexport default{\r\n    fetchTrending : `https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchTopRated : `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchMysteryn: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=9648`,\r\n    fetchSciFi: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=878`,\r\n    fetchWestern: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=37`,\r\n    fetchAnimation: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=16`,\r\n    fetchTV: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=10770`,\r\n\r\n}","import React from 'react';\r\nimport './Nav.css';\r\nimport requests from './Request'\r\nexport default function Nav({setSeletedOption}) {\r\n    return (\r\n        <div className='nav'>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchTrending)}>Trending</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchTopRated)}>Top_Rated</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchActionMovies)}>Action</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchComedyMovies)}>Comedy</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchHorrorMovies)}>Horror</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchRomanceMovies)}>Romance</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchMysteryn)}>Mystery</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchSciFi)}>Sci_Fi</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchWestern)}>Western</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchAnimation)}>Animation</h2>\r\n            <h2 onClick={()=>setSeletedOption(requests.fetchTV)}>Movie</h2>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './VideoCard.css';\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport TextTruncate from 'react-text-truncate';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nfunction VideoCard({movie}) {\r\n    return (\r\n        <div className='videoCard'>\r\n            <img src={`${base_url}${movie.backdrop_path || movie.poster_path}`} alt=''/>\r\n            <TextTruncate\r\n                line={1}\r\n                element=\"p\"\r\n                truncateText=\"â€¦\"\r\n                text={movie.overview}\r\n               />\r\n            <h2>{movie.title || movie.original_name}</h2>\r\n            <p className=\"stat\"><ThumbUpIcon />{movie.vote_count}</p>    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoCard\r\n","import React,{useState, useEffect} from 'react';\r\nimport './Result.css';\r\nimport VideoCard from './VideoCard';\r\n//import axios from './axios';\r\nimport axios from 'axios';\r\n//import requests from './Request';\r\n\r\nfunction Result({selectedOption}) {\r\n    const [movies,setMovies] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(selectedOption);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n    },[selectedOption])\r\n\r\n    return (\r\n        <div className='result'>\r\n            {movies.map((movie)=>(<VideoCard key={movie.id} movie={movie}/>))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","import React, {useState} from 'react';\nimport Header from './Header';\nimport Nav from './Nav';\nimport Result from './Result';\nimport './App.css';\nimport requests from './Request';\n\nfunction App() {\n\n  const [selectedOption,setSeletedOption] = useState(requests.fetchTrending)\n  return (\n    <div className='app'>\n      <Header />\n      <Nav setSeletedOption={setSeletedOption}/>\n      <Result selectedOption = {selectedOption}/>\n    </div>\n  )\n}\n\nexport default App\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}